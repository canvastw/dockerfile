#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/mvideo2.pid;

events {
    worker_connections  1024;
}


http {
    server_tokens off;

    passenger_root /opt/rubies/ruby-1.9.3-p547/lib/ruby/gems/1.9.1/gems/passenger-6.0.2;
    passenger_ruby /opt/rubies/ruby-1.9.3-p547/bin/ruby;

    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;
        root /opt/yakitori/public;
        passenger_enabled on;
        client_max_body_size 2048M; 
        #charset koi8-r;
	
        add_header 'Access-Control-Allow-Origin' '*';

        #access_log  logs/host.access.log  main;
	
        # Upload form should be submitted to this location
        location ~* \/api\/clients\/([0-9]+)\/videos\/upload {
            passenger_enabled on;
            # Pass altered request body to this location
            upload_pass   @test;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
            #upload_store /home/user/panda/public/data/tmp_uploads;
            upload_store /opt/yakitori/public/data/tmp_uploads;

            # Allow uploaded files to be read only by user
            upload_store_access user:rw group:rw all:rw;

            # Set specified fields in request body
            upload_set_form_field video[filename] "$upload_file_name";
            upload_set_form_field video[content_type] "$upload_content_type";
            upload_set_form_field video[filepath] "$upload_tmp_path";

            # Inform backend about hash and size of a file
            upload_aggregate_form_field "video[md5]" "$upload_file_md5";
            upload_aggregate_form_field "video[size]" "$upload_file_size";

            # Pass all params back to the backend
            upload_pass_form_field ".*";

            # upload_cleanup 400 404 499 500-505;
            upload_cleanup 505;
        }
                    
        # Pass altered request body to a backend
        location @test {
            passenger_enabled on;
        }
        
        location /data/hls {
            add_header 'Access-Control-Allow-Origin' '*';
        }
	
        #  location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

	 #location /hls {
	 # Serve HLS fragments
	#	 types {
	#	 application/vnd.apple.mpegurl m3u8;
	#	 video/mp2t ts;
	#	 }
	# root html;
	# expires -1;
	# add_header 'Access-Control-Allow-Origin' '*';
        # add_header Cache-Control no-cache;
	# }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }
}
#rtmp {
#        server {
#                listen 1935;
#                chunk_size 4096;

#                application stream {
#                        live on;
#                        hls  on;
#                        hls_path /opt/nginx/html/hls;
#                        hls_fragment 5s;
#                       hls_continuous on;
#                }
#        }
#}
